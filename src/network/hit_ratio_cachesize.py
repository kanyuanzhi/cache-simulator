import matplotlib as mpl
mpl.use('TkAgg')
import matplotlib.pyplot as plt
import numpy as np


if __name__ == "__main__":
    font1 = {
        'family': 'Arial',
        'size': 13,
    }

    font2 = {
        'family': 'Arial',
        'size': 10,
    }

    # hit_ratio_model_reactive = [0.12185411242800682, 0.14846782742621975, 0.16640640097621193, 0.17920651987115402, 0.18864937535259474, 0.1957574348232196, 0.20117795992166393, 0.2053479750488385, 0.20857539985638723, 0.21108371035422827, 0.21303861577565658, 0.21456496141798354, 0.21575793215924566, 0.21669075017633135, 0.21742012032362273, 0.21799017444126015, 0.21843538363709955, 0.21878274207285864, 0.2190534249702764]
    #
    # hit_ratio_model_proactive_remove = [0.13184644752692853, 0.1643851366776737, 0.1878578925435219, 0.20539202162510453, 0.217940786239641, 0.21997647766031583, 0.21997647766030926, 0.21997647766031586, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834, 0.2199764776598834]
    #
    # hit_ratio_model_proactive_renew = [0.13589213850207016, 0.17331230395482766, 0.20267248446764338, 0.22718872218859096, 0.24845522566285613, 0.2673630977470805, 0.2844660939991428, 0.3001359109989728, 0.3146358583827293, 0.328159988596835, 0.34085580262379145, 0.35283827898948306, 0.3641989492359823, 0.37501198712199085, 0.38533842203586444, 0.39522913333652226, 0.4047270284704211, 0.4138686599634232, 0.4226854475281816]
    #
    # hit_ratio_model_proactive_optional_renew = [0.14312141646424986, 0.1847509634791129, 0.21796342106218286, 0.2457286154339288, 0.26909600637305375, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466, 0.28017433911278466]
    #
    # hit_ratio_model_proactive_optional_renew_fixed = [0.1419813136349537, 0.18363891252565007, 0.21796342106218286, 0.24854487071217252, 0.2776580634344566, 0.3086221056387178, 0.31665513532481515, 0.32415806638054556, 0.3312066455711007, 0.33786064723105624, 0.3441681928723657, 0.35016867687349384, 0.35589481218278335, 0.3613740995741959, 0.3666299073389893, 0.37168228058920627, 0.376548558497511, 0.38124385231532343, 0.38578142064794807]


    hit_ratio_sim_reactive = [0.16337724790863098, 0.21919181790835254, 0.25958170719503654, 0.28215736422446214, 0.2982319358165036, 0.30586016096579477, 0.311409928796487, 0.3246602334158541, 0.33095100284369733, 0.33256223283882325]

    hit_ratio_sim_proactive_remove = [0.17418646436414453, 0.2550320392009046, 0.3015758600119308, 0.3239464502239489, 0.3383662504353017, 0.3484157255752499, 0.35760219341974075, 0.363590620911744, 0.3653054048623669, 0.36853751760209214]

    hit_ratio_sim_proactive_renew = [0.18275784585424312, 0.2597951471758154, 0.3133291536050157, 0.35559666050092487, 0.3867886888434492, 0.41938536633959256, 0.44627060715721756, 0.4712166320582422, 0.4897550222934723, 0.5130772118633463]

    hit_ratio_sim_proactive_optional_renew = [0.18829668281774134, 0.2628838753489776, 0.3218896932606911, 0.35541971675093703, 0.36171875, 0.37342796662931144, 0.3843422598954817, 0.38594874604637264, 0.3929954285428793, 0.3983984737806562]

    index_sim = [i*50+50 for i in range(len(hit_ratio_sim_proactive_remove))]


    plt.plot(index_sim, hit_ratio_sim_proactive_optional_renew, 'x--', color="black", label="sim: proactive optional renewing")
    plt.plot(index_sim, hit_ratio_sim_proactive_renew, ".-", color="black", label="sim: proactive renewing")
    plt.plot(index_sim, hit_ratio_sim_proactive_remove, "2:", color="black", label="sim: proactive removing")
    plt.plot(index_sim, hit_ratio_sim_reactive, "+-.", color="black", label="sim: reactive")



    # plt.plot(index, hit_ratio_model_uniform, label="model-uniform")
    # plt.plot(index, hit_ratio_model_exponential, label="model-exponential")

    plt.xlabel("cache capacity", font1)
    plt.ylabel("hit probability", font1)
    plt.grid(True)
    # plt.axis([50, 255, 0.1, 0.35], font1)
    my_x_ticks = np.arange(0, 501, 100)
    my_y_ticks = np.arange(0.15, 0.60, 0.05)
    plt.xticks(my_x_ticks)
    plt.yticks(my_y_ticks)
    plt.legend(prop=font2)
    # plt.savefig("kan6.eps")
    plt.show()

