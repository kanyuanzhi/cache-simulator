import simpy
import random
import matplotlib as mpl
mpl.use('TkAgg')
import matplotlib.pyplot as plt
import numpy as np
from mcav.zipf import Zipf

def transfer(a_list):
    length = len(a_list)
    new_list = []
    for i in range(length):
        if i%2 == 0:
            new_list.append(a_list[i])
    return new_list

if __name__ == "__main__":
    font1 = {
        'family': 'Arial',
        'size': 13,
    }

    font2 = {
        'family': 'Arial',
        'size': 10,
    }


    hit_ratio_sim_reactive =[0.13371607779660588, 0.17773608505315822, 0.2025540177237877, 0.2133820987499687, 0.21847082896641215, 0.2243723849372385, 0.23481141308439357, 0.2370537709150489, 0.2367585008687019, 0.24198931071688454, 0.24073889663413664, 0.2430953098322788, 0.25008150470219437, 0.24817024263084017, 0.25153821040206936, 0.24666301424444667, 0.25031176734673516, 0.2505424887137406, 0.25112163509471586, 0.2503262397109014, 0.2524353251621495, 0.25, 0.25, 0.2552124702144559, 0.25341350369535265]

    hit_ratio_sim_proactive_remove =[0.19026891807379612, 0.22946829280661274, 0.24477492962658495, 0.2518852561693599, 0.25273818454613656, 0.25464038572035275, 0.25616291532690244, 0.25694513591556306, 0.25065890208087555, 0.25677596309687073, 0.2556826660034817, 0.26083132287897065, 0.25790674926638407, 0.2552692624279764, 0.2598175228096488, 0.2611260454002389, 0.2625855113138046, 0.2634184145396365, 0.2588355515677185, 0.25942808748069546, 0.2543693671264253, 0.2563708096573286, 0.26038075251086795, 0.25894283179110156, 0.2580750571852299]

    hit_ratio_sim_proactive_renew = [0.25829035553230184, 0.25609301632257586, 0.2578675902623776, 0.2585263995227205, 0.26394561211276024, 0.26142746586114785, 0.2592916375262264, 0.25939679831384554, 0.256364594045499, 0.2618199037958278, 0.26144870928165453, 0.2575825489317197, 0.2602578545500063, 0.25730688935281837, 0.25869161691667086, 0.25958590883964017, 0.2596303160847568, 0.26072689928111614, 0.26321974148061106, 0.25748278021289916, 0.2618517499312036, 0.26315260539671376, 0.26009113772753306, 0.26259867931085845, 0.26353997754771114]

    hit_ratio_sim_proactive_optional_renew =[0.260551744855555, 0.2804418842422882, 0.26820777399318774, 0.26701700461057953, 0.2644611528822055, 0.2674658222758343, 0.2671765295887663, 0.26233217679891385, 0.2682792191498971, 0.2653270607076723, 0.2656139997988535, 0.26611649024231177, 0.26465532275343184, 0.26133025334572024, 0.25999549357834917, 0.263682087545441, 0.260493519441675, 0.26848629022161014, 0.26288902665840047, 0.26288427893026745, 0.2615029713397357, 0.25713928169190337, 0.25615351466450353, 0.2592156960884907, 0.2601048749278671]

    index_sim = [i*2+2 for i in range(len(hit_ratio_sim_reactive))]
    plt.plot(index_sim, hit_ratio_sim_proactive_optional_renew, "x--", color="black", label="sim: proactive optional renewing")
    plt.plot(index_sim, hit_ratio_sim_proactive_renew, ".-", color="black", label="sim: proactive renewing")
    plt.plot(index_sim, hit_ratio_sim_proactive_remove, "2:", color="black", label="sim: proactive removing")
    plt.plot(index_sim, hit_ratio_sim_reactive, "+-.", color="black", label="sim: reactive")


    # plt.plot(index, hit_ratio_model_uniform, label="model-uniform")
    # plt.plot(index, hit_ratio_model_exponential, label="model-exponential")

    plt.xlabel("mean staleness time (s)", font1)
    plt.ylabel("hit probability", font1)
    plt.grid(True)
    # plt.axis([2, 42, 0.09, 0.15], font1)
    my_x_ticks = np.arange(0, 53, 10 )
    my_y_ticks = np.arange(0.125, 0.26, 0.025)
    plt.xticks(my_x_ticks)
    plt.yticks(my_y_ticks)
    plt.legend(prop=font2)
    # plt.savefig("kan6.eps")
    plt.show()

